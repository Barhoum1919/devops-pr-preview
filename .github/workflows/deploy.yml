name: Deploy Application

on:
  workflow_run:
    workflows: ["Build and Push Container Images"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'main'
        type: choice
        options:
        - main
        - pr-preview

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

  
jobs:
  deploy-main:
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    runs-on: self-hosted
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        run: echo ${{ secrets.GHCR_PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Deploy main application
        run: |
          chmod +x ./scripts/*.sh
          export GITHUB_REPOSITORY="${{ github.repository }}"
          ./scripts/deploy_base.sh ${{ vars.DOMAIN_NAME }} latest
        env:
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}

  deploy-pr-preview:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: self-hosted
    environment: preview
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR number
        id: pr
        run: |
          PR_NUMBER=$(jq -r '.workflow_run.pull_requests[0].number' <<< '${{ toJson(github.event) }}')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "PR Number: $PR_NUMBER"

      - name: Log in to Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Deploy PR preview
        id: deploy
        run: |
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export GITHUB_ACTOR="${{ github.actor }}"
          export GITHUB_SHA="${{ github.sha }}"
          ./scripts/deploy_preview.sh ${{ steps.pr.outputs.number }} ${{ vars.DOMAIN_NAME || 'barhoum1919' }}
          
        env:
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.pr.outputs.number }}
            });

            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            const comment = `## ðŸš€ PR Preview Deployed
            
            **Preview URL:** ${previewUrl}
            
            **Build Info:**
            - **Commit:** ${context.sha.substring(0, 8)}
            - **PR:** #${{ steps.pr.outputs.number }}
            - **Container:** \`ghcr.io/${{ github.repository }}/web:pr-${{ steps.pr.outputs.number }}\`
            
            The preview will be automatically removed when this PR is closed.`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr.outputs.number }}
            });

            const existingComment = comments.find(c => 
              c.user.login === 'github-actions[bot]' && 
              c.body.includes('PR Preview Deployed')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr.outputs.number }},
                body: comment
              });
            }